// Problem: CF 1713 F - Lost Array
// https://codeforces.com/contest/1713/problem/F

/*
F. Lost Array
Algorithms/Techniques: Bit manipulation, Gaussian elimination optimization using XOR operations
Time Complexity: O(n log n)
Space Complexity: O(n)

This code reconstructs an array 'a' from the last column of a matrix 'b'
generated by specific XOR rules. The transformations are equivalent to
solving a system of linear equations in GF(2) (Galois Field of two elements).

The matrix transformation:
- b[i][0] = 0 for all i
- b[0][j] = a[j] for j = 1..n
- b[i][j] = b[i][j-1] XOR b[i-1][j] for i,j >= 1

The input is only b[1..n][n], and we need to reconstruct a[1..n].

The algorithm uses bit-by-bit Gaussian elimination optimization:
1. First pass: For each bit position, XOR elements that have their (i)-th bit set to affect the result.
2. Back substitution to compute final values of 'a'.
*/

#include <stdio.h>
#include <algorithm>
#include <iostream>

#define LL long long
#define fr(x)                                                                  \
  freopen(#x ".in", "r", stdin);                                               \
  freopen(#x ".out", "w", stdout);
using namespace std;
const int N = 5e5 + 5;
int n, a[N];

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> a[i]; // Read the last column of matrix b

  int m = __lg(n); // m is the highest bit position needed
  // First triangularization step:
  // For each bit position i, if j has bit i set, then xor a[j] with a[j ^ (1 << i)]
  for (int i = 0; i <= m; i++)
    for (int j = 0; j < n; j++)
      if (j >> i & 1)
        a[j] ^= a[j ^ (1 << i)];

  // Back substitution:
  // For each bit position i, if j has bit i set, then xor a[j ^ (1 << i)] with a[j]
  for (int i = 0; i <= m; i++)
    for (int j = 0; j < n; j++)
      if (j >> i & 1)
        a[j ^ (1 << i)] ^= a[j];

  // Output the reconstructed array in reverse order (as required by output format)
  for (int i = n - 1; ~i; i--)
    cout << a[i] << " ";
  return 0;
}


// https://github.com/VaHiX/codeForces/