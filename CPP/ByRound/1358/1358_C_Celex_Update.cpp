// Problem: CF 1358 C - Celex Update
// https://codeforces.com/contest/1358/problem/C

/*
C. Celex Update
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output

The GAZ-GIZ function fills an infinite table such that each cell (x, y) contains the value (x-1) * (y-1) + 1.
To compute the number of distinct path sums from (x1, y1) to (x2, y2), we observe:
- We must move exactly (x2 - x1) steps right and (y2 - y1) steps down.
- The total number of such paths is the binomial coefficient C((x2-x1)+(y2-y1), (x2-x1)).
- However, since each step in a path contributes uniquely to the sum based on how many steps we've taken
  and where we go, the actual number of distinct sums equals the number of different values that 
  can be generated by varying paths.
  
This problem has a mathematical solution:
- All paths from (x1, y1) to (x2, y2) go through cells with coordinates ranging from x1 to x2 and y1 to y2.
- The value in each cell is given by the formula: (x - 1) * (y - 1) + 1
- But since we're looking at all possible sums of values along paths, not individual cells, 
   the key insight is that there are a fixed number of distinct sums.
  
Actually, let's reconsider:
- Each cell (i,j) has value (i-1)*(j-1)+1.
- A path from (x1,y1) to (x2,y2), moving only right or down, will visit some subset of these cells.
- The number of such paths is C((x2-x1)+(y2-y1), (x2-x1))

But for the number of possible distinct sums, the key insight is:
In any rectangle from (x1,y1) to (x2,y2), if we move only right or down:
  - We take exactly (x2 - x1) steps right and (y2 - y1) steps down.
  - Each step right adds some value based on current row,
    whereas each step down adds some value based on current column.
  
However, a deeper observation reveals that for any path from (x1,y1) to (x2,y2):
The sum is constant if all cells are visited in same sequence of steps.
But since we're only moving right or down:
We have a fixed number of combinations (paths), and each combination gives a different sum 
if the individual values differ.

But looking at examples, and thinking more carefully:

If we analyze what happens as we go:
- All paths from (x1,y1) to (x2,y2) are constrained in the number of rows and columns we visit.
- The total number of such paths is (x2 - x1 + y2 - y1)! / ((x2 - x1)! * (y2 - y1)!)
But again, it's NOT just that, because each path will have a different sum due to cell values.

Actually simpler solution:
The answer is simply (x2 - x1) + (y2 - y1) + 1 for the total number of distinct path sums,
because of the way GAZ-GIZ fills up values and how paths behave under addition.

Time Complexity: O(1)
Space Complexity: O(1)

*/

#include <cstdio>
typedef long long ll;
int main() {
  long t; // Number of test cases
  scanf("%ld", &t);
  while (t--) {
    ll x1, y1, x2, y2; // Coordinates of start and end points
    scanf("%lld %lld %lld %lld", &x1, &y1, &x2, &y2);
    ll ans = (x2 - x1) * (y2 - y1) + 1; // Calculating number of distinct sums using pattern derived from problem observation
    printf("%lld\n", ans);
  }
  return 0;
}


// https://github.com/VaHiX/codeForces/