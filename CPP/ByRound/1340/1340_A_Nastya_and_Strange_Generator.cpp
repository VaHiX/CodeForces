// Problem: CF 1340 A - Nastya and Strange Generator
// https://codeforces.com/contest/1340/problem/A

/*
A. Nastya and Strange Generator
Algorithms/Techniques: Simulation, Greedy
Time complexity: O(n) per test case
Space complexity: O(1)

The problem involves determining whether a given permutation could be generated by a specific algorithm.
The algorithm works by placing numbers 1 to n in positions based on a greedy selection rule involving 'r' and 'count' arrays.
This code checks if the given permutation is valid under the described rules.

Key idea:
- At each step, we simulate the process of placing number i
- We track the maximum value in count array and ensure that at each step,
  we're allowed to place the number at the position chosen by the generator
- The check is done by ensuring that for each element p[i], 
  it can be placed at its current index if this doesn't violate the greedy rule

The condition f |= (p - q > 1) essentially checks whether placing number p at position i 
would require moving more than one step ahead - which isn't allowed in valid permutations.
*/

#include <stdio.h>
#include <iostream>

using namespace std;
typedef long long LL;
LL t, n, p, q, f;
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  for (cin >> t; t--;) {
    for (cin >> n, q = (f = 0) + n; n--;) { // Initialize q to n and f to 0, then decrement n
      cin >> p;
      f |= (p - q > 1);  // Check if current number is more than one position ahead of previous position - invalid if true
      q = p;             // Update previous value to current
    }
    puts(f ? "No" : "Yes"); // Output result based on flag f
  }
  return 0;
}


// https://github.com/VaHiX/codeForces/