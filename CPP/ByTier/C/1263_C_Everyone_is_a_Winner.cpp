// Problem: CF 1263 C - Everyone is a Winner!
// https://codeforces.com/contest/1263/problem/C

/*
C. Everyone is a Winner!
Algorithm: For a given n, find all possible values of floor(n/k) for positive integer k.
Techniques: Number theory, mathematical insight on divisors and quotient classes.

Time Complexity: O(sqrt(n)) per test case
Space Complexity: O(sqrt(n)) for storing unique quotients

The key insight is that for any n, the distinct values of floor(n/k) are limited.
When k runs from 1 to n, floor(n/k) takes on only O(sqrt(n)) distinct values,
which can be efficiently generated by iterating k from 1 to sqrt(n).
For each k, we add both k and n/k to our set of results.
We also include 0, which corresponds to k > n (since floor(n/k) = 0 for such cases).
*/

#include <cstdio>
#include <set>

int main() {
  long t;
  scanf("%ld", &t);
  while (t--) {
    long n;
    scanf("%ld", &n);
    std::set<long> s;
    s.insert(0); // Insert 0, which corresponds to k > n
    for (long p = 1; p * p <= n; p++) { // Iterate up to sqrt(n)
      s.insert(p);       // Add current p (as a possible quotient)
      s.insert(n / p);   // Add corresponding quotient n/p
    }
    printf("%ld\n", s.size());
    for (std::set<long>::iterator it = s.begin(); it != s.end(); it++) {
      printf("%ld ", *it);
    }
    puts("");
  }
  return 0;
}


// https://github.com/VaHiX/codeForces/