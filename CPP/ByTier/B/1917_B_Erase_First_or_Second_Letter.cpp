// Problem: CF 1917 B - Erase First or Second Letter
// https://codeforces.com/contest/1917/problem/B

/*
B. Erase First or Second Letter
time limit per test1 second
memory limit per test256 megabytes

Task:
You are given a string s of length n. Let's define two operations you can apply on the string:
- remove the first character of the string;
- remove the second character of the string.

Your task is to find the number of distinct non-empty strings that can be generated by applying the given operations on the initial string any number of times (possibly zero), in any order.

Algorithm:
The key insight is that at each position p in the string, we can form new unique substrings by considering all prefixes ending at p. The number of distinct prefixes ending at position p is equal to the size of the set of characters seen so far from the beginning of the string up to position p.

We maintain a set of unique characters encountered so far as we iterate through the string. For each character, we update the set and add its size to the cumulative count, which represents how many unique prefixes can be formed up to that point.

Time Complexity: O(n log n) per test case due to the use of std::set for maintaining unique elements.
Space Complexity: O(n) for storing the string and the set of characters.
*/

#include <iostream>
#include <set>
#include <string>

int main() {
  std::ios_base::sync_with_stdio(false);
  long t;
  std::cin >> t;
  while (t--) {
    long n;
    std::cin >> n;
    std::string s;
    std::cin >> s;
    std::set<char> u; // Set to store unique characters seen so far
    long cnt(0);
    for (long p = 0; p < s.size(); p++) {
      u.insert(s[p]); // Insert current character into the set
      cnt += u.size(); // Add number of unique characters so far to the result
    }
    std::cout << cnt << std::endl;
  }
}


// https://github.com/VaHiX/codeForces/