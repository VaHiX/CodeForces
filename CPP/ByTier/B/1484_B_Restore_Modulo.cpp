// Problem: CF 1484 B - Restore Modulo
// https://codeforces.com/contest/1484/problem/B

/*
B. Restore Modulo
Algorithms/Techniques: 
  - Mathematical analysis of linear congruential sequences
  - GCD computation and modular arithmetic
  - Linear array traversal with conditional checks

Time Complexity: O(n * log(max(a))) where n is the size of the array and max(a) is the maximum element in the array.
Space Complexity: O(n) for storing the input array.

The problem involves determining if a given array can be generated by a linear congruential generator:
a[i] = (a[i-1] + c) mod m, starting with a[0] = s mod m.
We need to find the maximum possible value of m or determine impossibility.
*/

#include <algorithm>
#include <iostream>
#include <stdlib.h>
#include <vector>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int tt;
  cin >> tt;
  while (tt--) {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
      cin >> a[i];
    }
    long long m = 0;
    // Compute GCD of all differences between symmetric elements
    for (int i = 1; i + 1 < n; i++) {
      m = __gcd(m, 1LL * abs(a[i + 1] + a[i - 1] - 2 * a[i]));
    }
    if (m == 0) {
      cout << 0 << '\n'; // m can be arbitrarily large
    } else if (m < *max_element(a.begin(), a.end())) {
      cout << -1 << '\n'; // No valid m exists
    } else {
      // Output the maximum m and compatible c value
      cout << m << ' ' << (a[1] - a[0] + m) % m << '\n';
    }
  }
  return 0;
}


// https://github.com/VaHiX/codeForces/